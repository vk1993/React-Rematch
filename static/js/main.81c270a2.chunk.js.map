{"version":3,"sources":["component/cards/card.js","component/cardlist/cardlist.jsx","component/searchBar/searchbar.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","console","log","react_default","a","createElement","Fragment","className","alt","src","concat","monstres","id","name","email","CardLIst","monsters","map","monster","cards_card","key","SearchBar","_ref","placeholder","getSearch","searchField","type","onChange","value","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","objectSpread","state","defineProperty","target","fetch","then","response","json","users","_this2","_this$state","filteredMonsters","filter","toLowerCase","includes","searchbar","cardlist_cardlist","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iWAiBeA,qBAbF,SAACC,GAEV,OADAC,QAAQC,IAAIF,GAERG,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACXJ,EAAAC,EAAAC,cAAA,OAAKG,IAAI,YAAYC,IAAG,wBAAAC,OAA0BV,EAAMW,SAASC,GAAzC,4BAC3BT,EAAAC,EAAAC,cAAA,UAAKL,EAAMW,SAASE,MACpBV,EAAAC,EAAAC,cAAA,SAAIL,EAAMW,SAASG,WCKjBC,EAZE,SAACf,GAEV,OACIG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAEPP,EAAMgB,SAASC,IAAI,SAAAC,GAAO,OAC1Bf,EAAAC,EAAAC,cAACc,EAAD,CAAMC,IAAKF,EAAQN,GAAID,SAAYO,QCKxCG,SAZG,SAAAC,GAAwC,IAAtCC,EAAsCD,EAAtCC,YAAYC,EAA0BF,EAA1BE,UAAUC,EAAgBH,EAAhBG,YAEtC,OACItB,EAAAC,EAAAC,cAAA,SAAOE,UAAU,SACdmB,KAAK,SAASb,KAAK,cACnBU,YAAcA,EACdI,SAAUH,EACVI,MAAOH,MC2BDI,cA9Bb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAWFT,UAAU,SAACa,GACTP,EAAKQ,SAALP,OAAAQ,EAAA,EAAAR,CAAA,GACKD,EAAKU,MADVT,OAAAU,EAAA,EAAAV,CAAA,GACiBM,EAAEK,OAAO7B,KAAMwB,EAAEK,OAAOd,UAZzCE,EAAKU,MAAQ,CACTxB,SAAU,GACVS,YAAY,IAJLK,sNAQLa,MAAM,8CACTC,KAAM,SAAAC,GAAQ,OAAIA,EAASC,SAC3BF,KAAK,SAAAG,GAAK,OAAIC,EAAKV,SAAS,CAACtB,SAAU+B,oIAOtC,IAAAE,EACyBhB,KAAKO,MAA7BxB,EADDiC,EACCjC,SAASS,EADVwB,EACUxB,YACVyB,EAAmBlC,EAASmC,OAAQ,SAAAjC,GAAO,OAAIA,EAAQL,KAAKuC,cAAcC,SAAS5B,EAAY2B,iBACrG,OACEjD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACiD,EAAD,CAAW9B,UAAWS,KAAKT,UAAWD,YAAa,mBAAoBE,YAAaQ,KAAKO,MAAMf,cAC/FtB,EAAAC,EAAAC,cAACkD,EAAD,CAAUvC,SAAUkC,YAzBRM,IAAMC,WCMNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXJC,IAASC,OACD7D,EAAAC,EAAAC,cAAC4D,EAAD,MACFC,SAASC,eAAe,SDwH1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.81c270a2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css'\r\n\r\n\r\nconst Card = (props) =>{\r\n    console.log(props)\r\n    return (\r\n        <React.Fragment >\r\n            <div className=\"card-container\">\r\n                <img alt=\"monstores\" src={`https://robohash.org/${props.monstres.id}?set=set2&size=180x180`}/>\r\n             <h2>{props.monstres.name}</h2>\r\n             <p>{props.monstres.email}</p>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './cardlist.css';\r\nimport Card from '../cards/card'\r\n\r\nconst CardLIst = (props) => {\r\n  \r\n        return(\r\n            <div className='card-list'>\r\n                {\r\n                    props.monsters.map(monster =>\r\n                    <Card key={monster.id} monstres = {monster}></Card>)\r\n                }\r\n            </div>\r\n        ) \r\n}\r\n\r\nexport default CardLIst;","import React from 'react';\r\nimport './searchBar.css';\r\n\r\nconst SearchBar = ({placeholder,getSearch,searchField}) =>{\r\n    \r\n    return(\r\n        <input className=\"search\"\r\n           type='search' name='searchField' \r\n           placeholder= {placeholder}\r\n           onChange={getSearch} \r\n           value={searchField}>\r\n        </input>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","  import React from 'react';\n  import './App.css';\n  import CardList from './component/cardlist/cardlist';\n  import SearchBar from './component/searchBar/searchbar'\n\n\n  class App extends React.Component{\n    constructor(){\n      super();\n      this.state = {\n          monsters: [],\n          searchField:\"\"\n      }\n    }\n    async componentDidMount(){\n      await fetch('https://jsonplaceholder.typicode.com/users')\n        .then( response => response.json())\n        .then(users => this.setState({monsters: users}))\n    }\n    getSearch=(e) =>{\n      this.setState({\n        ...this.state,[e.target.name]:e.target.value\n      })\n    }\n  render(){\n    const {monsters,searchField} = this.state;\n    const filteredMonsters = monsters.filter( monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>\"Monstore\" House</h1>\n        <SearchBar getSearch={this.getSearch} placeholder={\"Search a Monster\"} searchField={this.state.searchField}></SearchBar>\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n  ReactDOM.render(\n          <App />,\n        document.getElementById('root')\n    );\n\nserviceWorker.unregister();\n"],"sourceRoot":""}